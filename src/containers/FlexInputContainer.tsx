import { connect } from 'react-redux';
import { actions } from '../actions';
import { IState, IFlightTimes, IAircrew, IEntity } from '../types/State';
import { IAction } from '../actions';
import FlexInput from '../components/FlexInput';
import validator from '../util/validator';
type IAircrewEntity = IEntity<IAircrew>;

const nameLocation = {
    FRONT_SEAT: 'FRONT_SEAT',
    BACK_SEAT: 'BACK_SEAT',
    NOTE: 'NOTE',
}

/**
 * This component is responsible for displaying all the input elements, their errors from validation and does the
 * searching and comparison for aircrew names in input text. It accepts the unique input attributes as its "ownProps"
 * and passes most of them right on to the presentational component FlexInput. The heavy lifting of this component is
 * recognizing aircrew names in the input value, dispatching an action to add the aircrew Id to the correct part of
 * the state, dispatching the action passed to it by the parent component to update the value of the field, getting
 * the value of the field and any referenced aircrew Ids saved in the state to pass that info on to the presentational
 * component to dictate its display.
 */

interface IFlexInputContainerProps {
    placeHolder: string;
    name: string;
    value: string;
    onChange: (e: any) => any;
    validators?: string[];
    addNameIdTo?: {nameLocation: string, entityId: string};
}

const getAircrewList = (aircrew: IAircrewEntity): IAircrew[] => {
    return aircrew.allIds.map(id => aircrew.byId[id])
};

const getAircrewRefIds = (state: IState, addNameIdTo): IAircrew[] => {
    /**
     * @param {IState} state The application state
     * @param {nameLocation: string, entityId: string} addNameIdTo Object passed the container component with info
     * about applicable state slice.
     * @returns {IAircrew[]} Array of aircrew objects or empty array.
     * 
     * This returns the aircrew that are referenced in the value of the input field for the presentational component to
     * display as required.
     * 
     * State it needs:
     * state.aircrew.byId
     * state.sorties.byId
     * state.notes.byId
     */
     if (!addNameIdTo) {
         return [];
     }
    switch(addNameIdTo.nameLocation) {
        case nameLocation.FRONT_SEAT:
            return [state.aircrew.byId[state.sorties.byId[addNameIdTo.entityId].front.aircrewRefId]];
        case nameLocation.BACK_SEAT:
            return [state.aircrew.byId[state.sorties.byId[addNameIdTo.entityId].back.aircrewRefId]];
        case nameLocation.NOTE:
            return state.notes.byId[addNameIdTo.entityId].aircrewRefIds.map(id => state.aircrew.byId[id]);
        default:
            return [];
    }
};

const getErrors = () => {
    /**
     * @param
     * @param
     * @returns {IErrors[]} Array of IErrrors objects sorted by error level.
     * 
     * This does a lot. It combines all the errors generated by:
     * the input validation
     * any scheduling conflicts
     * 
     * So it runs the val and runs the logic that checks for scheds conflicts, then aggregates the errors.
     */
     
};

const getActiveAircrewRefIds = (state) => {
    /**
     * @param {IState} state The application state (store.getState())
     * @returns {object} keyed by aircrewId with values set to an array of the timespans associated with each ref
     * This checks all the places aircrew Ids can be referenced in the current day, aggregates them into an object and 
     * includes the times they are scheduled for, so we can check for conflicts.
     * Looks for names in:
     * state.sorites.byId[x].front/back
     * state.notes.byId
     */
    
};

const getOnChangeWithNameMatch = (aircrewList: IAircrew[], actions: any, ownProps: IFlexInputContainerProps) => {
    /** 
     * @param {function} dispatch
     * @param {IFlexInputContainerProps} ownProps Props passed to this container
     * @returns {function} If addNameIdTo is specified, returns updated onChange function. It wraps the onChange
     * function passed and:
     * compares the value being updated with all the aircrew names
     * and dispatches the Id of matched aircrew to the specified state slice if theres a match.
     * If not specified, returns the same onChange function.
     */
    if (!addNameIdTo) {
        return ownProps.onChange;
    }
    switch (addNameIdTo.nameLocation) {
        case nameLocation.FRONT_SEAT:
            return (e) => {
                
            };
        case nameLocation.BACK_SEAT:
        case nameLocation.NOTE:
        default:
            return ownProps.onChange;
    }
};

const mapStateToProps = (state: IState, ownProps: IFlexInputContainerProps) => {
    return {
        aircrewList: ownProps.addNameIdTo ? getAircrewList(state.aircrew) : [],
        aircrewRefIds: getAircrewRefIds(state, ownProps.addNameIdTo),
        errors: getErrors(), // check for sched conflicts here (possibly rename this)
    };
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
    /**
     * Necessary because I need a slice of the state in the dispatch I'm wrapping here. Specifically, depending on
     * ownProps.addNameToId, I'm comparing the input value (about to be dispatched by ownProps.onChange) to all the
     * other aircrew (the state I need) to see if there are matches and dispatching to update the state if there are.
     */
    return Object.assign({}, ownProps, {
        onChange: getOnChangeWithNameMatch(stateProps.aircrewList, dispatchProps, ownProps),
    });
};

const FlexInputContainer = connect(
    mapStateToProps,
    actions,
    mergeProps
)(FlexInput);

export default FlexInputContainer;
